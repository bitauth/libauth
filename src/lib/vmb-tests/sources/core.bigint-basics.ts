import type { VmbTestDefinitionGroup } from '../../lib.js';
import { binaryOpcodes, justZeroAndOne, ternaryOpcodes, unaryOpcodes, zerosAndOnes } from '../bch-vmb-test-mixins.bigint.js';
import { generateTestCases, setExpectedResults } from '../bch-vmb-test-utils.js';

// TODO: test acceptance of smallZerosAndOnes for all ops (core.minimal-data.ts)

// TODO: generate seeded-random test vectors for all ops

export default [
  [
    'BigInt',
    [
      ...setExpectedResults(generateTestCases(['<$0>', '', '$0 is truthy'], [zerosAndOnes]), {
        'negative one is truthy': [],
        'negative zero is truthy': ['invalid'],
        'one is truthy': ['skip'],
        'padded negative one (520 bytes) is truthy': [],
        'padded negative one (521 bytes) is truthy': ['chip_bigint'],
        'padded negative one is truthy': [],
        'padded negative zero (520 bytes) is truthy': ['invalid'],
        'padded negative zero (521 bytes) is truthy': ['chip_bigint_invalid'],
        'padded negative zero is truthy': ['invalid'],
        'padded one (520 bytes) is truthy': [],
        'padded one (521 bytes) is truthy': ['chip_bigint'],
        'padded one is truthy': [],
        'padded zero (520 bytes) is truthy': ['invalid'],
        'padded zero (521 bytes) is truthy': ['chip_bigint_invalid'],
        'padded zero is truthy': ['invalid'],
        'zero is truthy': ['skip'],
      }),
      ...setExpectedResults(generateTestCases(['', '$0 <1>', '$0 on empty stack'], [unaryOpcodes]), {
        'OP_0NOTEQUAL on empty stack': ['invalid'],
        'OP_1ADD on empty stack': ['invalid'],
        'OP_1SUB on empty stack': ['invalid'],
        'OP_ABS on empty stack': ['invalid'],
        'OP_BIN2NUM on empty stack': ['invalid'],
        'OP_NEGATE on empty stack': ['invalid'],
        'OP_NOT on empty stack': ['invalid'],
      }),
      [``, 'OP_BIN2NUM OP_NOT', 'OP_BIN2NUM OP_NOT on empty stack', ['invalid']],
      ...setExpectedResults(generateTestCases(['<$0>', '$1 <1>', '$1 on 1-item stack of $0'], [justZeroAndOne, [...unaryOpcodes, ...binaryOpcodes, ...ternaryOpcodes]]), {
        'OP_0NOTEQUAL on 1-item stack of one': ['invalid'],
        'OP_0NOTEQUAL on 1-item stack of zero': ['invalid'],
        'OP_1ADD on 1-item stack of one': ['invalid'],
        'OP_1ADD on 1-item stack of zero': ['invalid'],
        'OP_1SUB on 1-item stack of one': ['invalid'],
        'OP_1SUB on 1-item stack of zero': ['invalid'],
        'OP_ABS on 1-item stack of one': ['invalid'],
        'OP_ABS on 1-item stack of zero': ['invalid'],
        'OP_ADD on 1-item stack of one': ['invalid'],
        'OP_ADD on 1-item stack of zero': ['invalid'],
        'OP_BIN2NUM on 1-item stack of one': ['invalid'],
        'OP_BIN2NUM on 1-item stack of zero': ['invalid'],
        'OP_BOOLAND on 1-item stack of one': ['invalid'],
        'OP_BOOLAND on 1-item stack of zero': ['invalid'],
        'OP_BOOLOR on 1-item stack of one': ['invalid'],
        'OP_BOOLOR on 1-item stack of zero': ['invalid'],
        'OP_DIV on 1-item stack of one': ['invalid'],
        'OP_DIV on 1-item stack of zero': ['invalid'],
        'OP_GREATERTHAN on 1-item stack of one': ['invalid'],
        'OP_GREATERTHAN on 1-item stack of zero': ['invalid'],
        'OP_GREATERTHANOREQUAL on 1-item stack of one': ['invalid'],
        'OP_GREATERTHANOREQUAL on 1-item stack of zero': ['invalid'],
        'OP_LESSTHAN on 1-item stack of one': ['invalid'],
        'OP_LESSTHAN on 1-item stack of zero': ['invalid'],
        'OP_LESSTHANOREQUAL on 1-item stack of one': ['invalid'],
        'OP_LESSTHANOREQUAL on 1-item stack of zero': ['invalid'],
        'OP_MAX on 1-item stack of one': ['invalid'],
        'OP_MAX on 1-item stack of zero': ['invalid'],
        'OP_MIN on 1-item stack of one': ['invalid'],
        'OP_MIN on 1-item stack of zero': ['invalid'],
        'OP_MOD on 1-item stack of one': ['invalid'],
        'OP_MOD on 1-item stack of zero': ['invalid'],
        'OP_MUL on 1-item stack of one': ['invalid'],
        'OP_MUL on 1-item stack of zero': ['invalid'],
        'OP_NEGATE on 1-item stack of one': ['invalid'],
        'OP_NEGATE on 1-item stack of zero': ['invalid'],
        'OP_NOT on 1-item stack of one': ['invalid'],
        'OP_NOT on 1-item stack of zero': ['invalid'],
        'OP_NUM2BIN on 1-item stack of one': ['invalid'],
        'OP_NUM2BIN on 1-item stack of zero': ['invalid'],
        'OP_NUMEQUAL on 1-item stack of one': ['invalid'],
        'OP_NUMEQUAL on 1-item stack of zero': ['invalid'],
        'OP_NUMEQUALVERIFY on 1-item stack of one': ['invalid'],
        'OP_NUMEQUALVERIFY on 1-item stack of zero': ['invalid'],
        'OP_NUMNOTEQUAL on 1-item stack of one': ['invalid'],
        'OP_NUMNOTEQUAL on 1-item stack of zero': ['invalid'],
        'OP_SUB on 1-item stack of one': ['invalid'],
        'OP_SUB on 1-item stack of zero': ['invalid'],
        'OP_WITHIN on 1-item stack of one': ['invalid'],
        'OP_WITHIN on 1-item stack of zero': ['invalid'],
      }),
      ...setExpectedResults(generateTestCases(['<$0> <$1>', '$2 <1>', '$2 on 2-item stack of $0 and $1'], [justZeroAndOne, justZeroAndOne, ternaryOpcodes]), {
        'OP_WITHIN on 2-item stack of one and one': ['invalid'],
        'OP_WITHIN on 2-item stack of one and zero': ['invalid'],
        'OP_WITHIN on 2-item stack of zero and one': ['invalid'],
        'OP_WITHIN on 2-item stack of zero and zero': ['invalid'],
      }),
    ],
  ],
] as const satisfies VmbTestDefinitionGroup[];
