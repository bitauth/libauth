import type { VmbTestDefinitionGroup } from '../../lib.js';
import { unaryOpcodes } from '../bch-vmb-test-mixins.bigint.js';
import { repeat } from '../bch-vmb-test-mixins.js';
import { generateTestCases, setExpectedResults } from '../bch-vmb-test-utils.js';

export default [
  [
    'BigInt unary operation limits',
    [
      [`<$(<0xff> <11> LIB_REPEAT)>`, '<0> <9988> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT', 'Maximum VM number (max op cost density)', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <35> LIB_REPEAT)>`, '<0> <9964> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_1SUB', 'Subtract one from maximum VM number', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <35> LIB_REPEAT)>`, '<0> <9964> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_ABS', 'OP_ABS maximum VM number', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <35> LIB_REPEAT)>`, '<0> <9964> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_1ADD', 'Add one to maximum VM number', ['invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <35> LIB_REPEAT)>`, '<0> <9964> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_NEGATE', 'Negate maximum VM number', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <59> LIB_REPEAT)>`, '<0> <9940> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_NEGATE OP_1ADD', 'Add one to minimum VM number', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <59> LIB_REPEAT)>`, '<0> <9940> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_NEGATE OP_ABS', 'OP_ABS minimum VM number', ['2023_invalid', 'nop2sh_ignore']],
      [`<$(<0xff> <59> LIB_REPEAT)>`, '<0> <9940> OP_NUM2BIN <0x8000> OP_CAT OP_1SUB OP_CAT OP_NEGATE OP_1SUB', 'Subtract one from minimum VM number', ['invalid', 'nop2sh_ignore']],

      ...setExpectedResults(
        generateTestCases(
          [`<${repeat('$1', 625)}>`, `${repeat('OP_DUP OP_CAT', 4)} $2$0`, '$2$0, 10,000 bytes of $1'],
          [
            unaryOpcodes,
            [
              ['0x00', '0x00'],
              ['0x7f', '0x7f'],
              ['0x80', '0x80'],
              ['0xff', '0xff'],
            ],
            [
              ['', ''],
              ['OP_BIN2NUM ', 'OP_BIN2NUM '],
            ],
          ],
        ),
        {
          'OP_0NOTEQUAL, 10,000 bytes of 0x00': ['invalid'],
          'OP_0NOTEQUAL, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_0NOTEQUAL, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_0NOTEQUAL, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_1ADD, 10,000 bytes of 0x00': ['invalid'],
          'OP_1ADD, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_1ADD, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_1ADD, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_1SUB, 10,000 bytes of 0x00': ['invalid'],
          'OP_1SUB, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_1SUB, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_1SUB, 10,000 bytes of 0xff': ['invalid'],
          'OP_ABS, 10,000 bytes of 0x00': ['invalid'],
          'OP_ABS, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_ABS, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_ABS, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_0NOTEQUAL, 10,000 bytes of 0x00': ['invalid'],
          'OP_BIN2NUM OP_0NOTEQUAL, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_0NOTEQUAL, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_0NOTEQUAL, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_1ADD, 10,000 bytes of 0x00': ['2023_invalid'],
          'OP_BIN2NUM OP_1ADD, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_1ADD, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_1ADD, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_1SUB, 10,000 bytes of 0x00': ['2023_invalid'],
          'OP_BIN2NUM OP_1SUB, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_1SUB, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_1SUB, 10,000 bytes of 0xff': ['invalid'],
          'OP_BIN2NUM OP_ABS, 10,000 bytes of 0x00': ['invalid'],
          'OP_BIN2NUM OP_ABS, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_ABS, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_ABS, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_BIN2NUM, 10,000 bytes of 0x00': ['invalid'],
          'OP_BIN2NUM OP_BIN2NUM, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_BIN2NUM, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_BIN2NUM, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_NEGATE, 10,000 bytes of 0x00': ['invalid'],
          'OP_BIN2NUM OP_NEGATE, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM OP_NEGATE, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM OP_NEGATE, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_BIN2NUM OP_NOT, 10,000 bytes of 0x00': ['2023_invalid'],
          'OP_BIN2NUM OP_NOT, 10,000 bytes of 0x7f': ['invalid'],
          'OP_BIN2NUM OP_NOT, 10,000 bytes of 0x80': ['invalid'],
          'OP_BIN2NUM OP_NOT, 10,000 bytes of 0xff': ['invalid'],
          'OP_BIN2NUM, 10,000 bytes of 0x00': ['invalid'],
          'OP_BIN2NUM, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_BIN2NUM, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_BIN2NUM, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_NEGATE, 10,000 bytes of 0x00': ['invalid'],
          'OP_NEGATE, 10,000 bytes of 0x7f': ['2023_invalid'],
          'OP_NEGATE, 10,000 bytes of 0x80': ['2023_invalid'],
          'OP_NEGATE, 10,000 bytes of 0xff': ['2023_invalid'],
          'OP_NOT, 10,000 bytes of 0x00': ['invalid'],
          'OP_NOT, 10,000 bytes of 0x7f': ['invalid'],
          'OP_NOT, 10,000 bytes of 0x80': ['invalid'],
          'OP_NOT, 10,000 bytes of 0xff': ['invalid'],
        },
      ),
    ],
  ],
] as const satisfies VmbTestDefinitionGroup[];
