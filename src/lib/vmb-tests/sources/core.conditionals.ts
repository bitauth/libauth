import type { VmbTestDefinitionGroup } from '../../lib.js';
import { zerosAndOnes } from '../bch-vmb-test-mixins.bigint.js';
import { repeat } from '../bch-vmb-test-mixins.js';
import { generateTestCases, setExpectedResults } from '../bch-vmb-test-utils.js';

export default [
  [
    'Conditionals',
    [
      ...setExpectedResults(
        generateTestCases(
          ['<$0>', 'OP_IF <$1> OP_ENDIF', '$0 OP_IF ($1)'],
          [
            [...zerosAndOnes, ['<0xff>', '0xff'], ['<0xffff>', '0xffff'], ['520 bytes of 0xff', repeat('0xff', 520)], ['521 bytes of 0xff', repeat('0xff', 521)]],
            [
              ['accept', '1'],
              ['reject', '0'],
            ],
          ],
        ),
        {
          '520 bytes of 0xff OP_IF (accept)': [],
          '520 bytes of 0xff OP_IF (reject)': ['invalid'],
          '521 bytes of 0xff OP_IF (accept)': ['2023_invalid'],
          '521 bytes of 0xff OP_IF (reject)': ['invalid'],
          '<0xff> OP_IF (accept)': [],
          '<0xff> OP_IF (reject)': ['invalid'],
          '<0xffff> OP_IF (accept)': [],
          '<0xffff> OP_IF (reject)': ['invalid'],
          'negative one OP_IF (accept)': [],
          'negative one OP_IF (reject)': ['invalid'],
          'negative zero OP_IF (accept)': ['invalid'],
          'negative zero OP_IF (reject)': ['invalid'],
          'one OP_IF (accept)': [],
          'one OP_IF (reject)': ['invalid'],
          'padded negative one (520 bytes) OP_IF (accept)': [],
          'padded negative one (520 bytes) OP_IF (reject)': ['invalid'],
          'padded negative one (521 bytes) OP_IF (accept)': ['2023_invalid'],
          'padded negative one (521 bytes) OP_IF (reject)': ['invalid'],
          'padded negative one OP_IF (accept)': [],
          'padded negative one OP_IF (reject)': ['invalid'],
          'padded negative zero (520 bytes) OP_IF (accept)': ['invalid'],
          'padded negative zero (520 bytes) OP_IF (reject)': ['invalid'],
          'padded negative zero (521 bytes) OP_IF (accept)': ['invalid'],
          'padded negative zero (521 bytes) OP_IF (reject)': ['invalid'],
          'padded negative zero OP_IF (accept)': ['invalid'],
          'padded negative zero OP_IF (reject)': ['invalid'],
          'padded one (520 bytes) OP_IF (accept)': [],
          'padded one (520 bytes) OP_IF (reject)': ['invalid'],
          'padded one (521 bytes) OP_IF (accept)': ['2023_invalid'],
          'padded one (521 bytes) OP_IF (reject)': ['invalid'],
          'padded one OP_IF (accept)': [],
          'padded one OP_IF (reject)': ['invalid'],
          'padded zero (520 bytes) OP_IF (accept)': ['invalid'],
          'padded zero (520 bytes) OP_IF (reject)': ['invalid'],
          'padded zero (521 bytes) OP_IF (accept)': ['invalid'],
          'padded zero (521 bytes) OP_IF (reject)': ['invalid'],
          'padded zero OP_IF (accept)': ['invalid'],
          'padded zero OP_IF (reject)': ['invalid'],
          'zero OP_IF (accept)': ['invalid'],
          'zero OP_IF (reject)': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['<$0>', 'OP_NOTIF <$1> OP_ENDIF', '$0 OP_NOTIF ($1)'],
          [
            [...zerosAndOnes, ['<0xff>', '0xff'], ['<0xffff>', '0xffff'], ['520 bytes of 0xff', repeat('0xff', 520)], ['521 bytes of 0xff', repeat('0xff', 521)]],
            [
              ['accept', '1'],
              ['reject', '0'],
            ],
          ],
        ),
        {
          '520 bytes of 0xff OP_NOTIF (accept)': ['invalid'],
          '520 bytes of 0xff OP_NOTIF (reject)': ['invalid'],
          '521 bytes of 0xff OP_NOTIF (accept)': ['invalid'],
          '521 bytes of 0xff OP_NOTIF (reject)': ['invalid'],
          '<0xff> OP_NOTIF (accept)': ['invalid'],
          '<0xff> OP_NOTIF (reject)': ['invalid'],
          '<0xffff> OP_NOTIF (accept)': ['invalid'],
          '<0xffff> OP_NOTIF (reject)': ['invalid'],
          'negative one OP_NOTIF (accept)': ['invalid'],
          'negative one OP_NOTIF (reject)': ['invalid'],
          'negative zero OP_NOTIF (accept)': [],
          'negative zero OP_NOTIF (reject)': ['invalid'],
          'one OP_NOTIF (accept)': ['invalid'],
          'one OP_NOTIF (reject)': ['invalid'],
          'padded negative one (520 bytes) OP_NOTIF (accept)': ['invalid'],
          'padded negative one (520 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded negative one (521 bytes) OP_NOTIF (accept)': ['invalid'],
          'padded negative one (521 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded negative one OP_NOTIF (accept)': ['invalid'],
          'padded negative one OP_NOTIF (reject)': ['invalid'],
          'padded negative zero (520 bytes) OP_NOTIF (accept)': [],
          'padded negative zero (520 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded negative zero (521 bytes) OP_NOTIF (accept)': ['2023_invalid'],
          'padded negative zero (521 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded negative zero OP_NOTIF (accept)': [],
          'padded negative zero OP_NOTIF (reject)': ['invalid'],
          'padded one (520 bytes) OP_NOTIF (accept)': ['invalid'],
          'padded one (520 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded one (521 bytes) OP_NOTIF (accept)': ['invalid'],
          'padded one (521 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded one OP_NOTIF (accept)': ['invalid'],
          'padded one OP_NOTIF (reject)': ['invalid'],
          'padded zero (520 bytes) OP_NOTIF (accept)': [],
          'padded zero (520 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded zero (521 bytes) OP_NOTIF (accept)': ['2023_invalid'],
          'padded zero (521 bytes) OP_NOTIF (reject)': ['invalid'],
          'padded zero OP_NOTIF (accept)': [],
          'padded zero OP_NOTIF (reject)': ['invalid'],
          'zero OP_NOTIF (accept)': [],
          'zero OP_NOTIF (reject)': ['invalid'],
        },
      ),

      ...setExpectedResults(
        generateTestCases(
          ['<$0>', 'OP_IFDUP $1', '$0 OP_IFDUP $1'],
          [
            [...zerosAndOnes, ['<0xff>', '0xff'], ['<0xffff>', '0xffff'], ['520 bytes of 0xff', repeat('0xff', 520)], ['521 bytes of 0xff', repeat('0xff', 521)]],
            [
              ['OP_NIP', 'OP_NIP'],
              ['OP_BIN2NUM OP_NOT', 'OP_BIN2NUM OP_NOT'],
            ],
          ],
        ),
        {
          '520 bytes of 0xff OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          '520 bytes of 0xff OP_IFDUP OP_NIP': [],
          '521 bytes of 0xff OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          '521 bytes of 0xff OP_IFDUP OP_NIP': ['2023_invalid'],
          '<0xff> OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          '<0xff> OP_IFDUP OP_NIP': [],
          '<0xffff> OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          '<0xffff> OP_IFDUP OP_NIP': [],
          'negative one OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'negative one OP_IFDUP OP_NIP': [],
          'negative zero OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'negative zero OP_IFDUP OP_NIP': ['invalid'],
          'one OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'one OP_IFDUP OP_NIP': [],
          'padded negative one (520 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded negative one (520 bytes) OP_IFDUP OP_NIP': [],
          'padded negative one (521 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded negative one (521 bytes) OP_IFDUP OP_NIP': ['2023_invalid'],
          'padded negative one OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded negative one OP_IFDUP OP_NIP': [],
          'padded negative zero (520 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'padded negative zero (520 bytes) OP_IFDUP OP_NIP': ['invalid'],
          'padded negative zero (521 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['2023_invalid'],
          'padded negative zero (521 bytes) OP_IFDUP OP_NIP': ['invalid'],
          'padded negative zero OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'padded negative zero OP_IFDUP OP_NIP': ['invalid'],
          'padded one (520 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded one (520 bytes) OP_IFDUP OP_NIP': [],
          'padded one (521 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded one (521 bytes) OP_IFDUP OP_NIP': ['2023_invalid'],
          'padded one OP_IFDUP OP_BIN2NUM OP_NOT': ['invalid'],
          'padded one OP_IFDUP OP_NIP': [],
          'padded zero (520 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'padded zero (520 bytes) OP_IFDUP OP_NIP': ['invalid'],
          'padded zero (521 bytes) OP_IFDUP OP_BIN2NUM OP_NOT': ['2023_invalid'],
          'padded zero (521 bytes) OP_IFDUP OP_NIP': ['invalid'],
          'padded zero OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'padded zero OP_IFDUP OP_NIP': ['invalid'],
          'zero OP_IFDUP OP_BIN2NUM OP_NOT': [],
          'zero OP_IFDUP OP_NIP': ['invalid'],
        },
      ),

      ...setExpectedResults(
        generateTestCases(
          ['<$0> $1', '<1>', '$0 $1 in unlocking bytecode (unbalanced)'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
          ],
        ),
        {
          '<0> OP_IF in unlocking bytecode (unbalanced)': ['invalid'],
          '<0> OP_NOTIF in unlocking bytecode (unbalanced)': ['invalid'],
          '<1> OP_IF in unlocking bytecode (unbalanced)': ['invalid'],
          '<1> OP_NOTIF in unlocking bytecode (unbalanced)': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['<$0> $1', 'OP_ENDIF <1>', '$0 $1 in unlocking bytecode, OP_ENDIF locking bytecode'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
          ],
        ),
        {
          '<0> OP_IF in unlocking bytecode, OP_ENDIF locking bytecode': ['invalid'],
          '<0> OP_NOTIF in unlocking bytecode, OP_ENDIF locking bytecode': ['invalid'],
          '<1> OP_IF in unlocking bytecode, OP_ENDIF locking bytecode': ['invalid'],
          '<1> OP_NOTIF in unlocking bytecode, OP_ENDIF locking bytecode': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['', '<$0> $1 <1>', '$0 $1 in locking bytecode (unbalanced)'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
          ],
        ),
        {
          '<0> OP_IF in locking bytecode (unbalanced)': ['invalid'],
          '<0> OP_NOTIF in locking bytecode (unbalanced)': ['invalid'],
          '<1> OP_IF in locking bytecode (unbalanced)': ['invalid'],
          '<1> OP_NOTIF in locking bytecode (unbalanced)': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['<$0>', '$1 <1>', 'unlock: $0, lock: $1 (unbalanced)'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
          ],
        ),
        {
          'unlock: <0>, lock: OP_IF (unbalanced)': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF (unbalanced)': ['invalid'],
          'unlock: <1>, lock: OP_IF (unbalanced)': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF (unbalanced)': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['', '<$0> $1 OP_ENDIF <1>', '$0 $1 OP_ENDIF in locking bytecode'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
          ],
        ),
        {
          '<0> OP_IF OP_ENDIF in locking bytecode': [],
          '<0> OP_NOTIF OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_ENDIF in locking bytecode': [],
          '<1> OP_NOTIF OP_ENDIF in locking bytecode': [],
        },
      ),

      ...setExpectedResults(
        generateTestCases(
          ['<$0>', '$1 $2 OP_ENDIF', 'unlock: $0, lock: $1 $2 OP_ENDIF'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
            [
              ['<1>', '<1>'],
              ['OP_RETURN', 'OP_RETURN'],
              ['<1> <1> OP_IF', '<1> <1> OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
              ['<1> <0> OP_NOTIF', '<1> <0> OP_NOTIF'],
              ['OP_ELSE', 'OP_ELSE'],
              ['<1> OP_ELSE', '<1> OP_ELSE'],
              ['OP_ELSE <1>', 'OP_ELSE <1>'],
              ['OP_ELSE <1> OP_ELSE', 'OP_ELSE <1> OP_ELSE'],
              ['OP_ELSE OP_ELSE <1>', 'OP_ELSE OP_ELSE <1>'],
            ],
          ],
        ),
        {
          'unlock: <0>, lock: OP_IF <1> <0> OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF <1> <1> OP_IF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF <1> OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF <1> OP_ENDIF': ['skip'],
          'unlock: <0>, lock: OP_IF OP_ELSE <1> OP_ELSE OP_ENDIF': [],
          'unlock: <0>, lock: OP_IF OP_ELSE <1> OP_ENDIF': [],
          'unlock: <0>, lock: OP_IF OP_ELSE OP_ELSE <1> OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_IF OP_RETURN OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF <1> <0> OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF <1> <1> OP_IF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF <1> OP_ELSE OP_ENDIF': [],
          'unlock: <0>, lock: OP_NOTIF <1> OP_ENDIF': ['skip'],
          'unlock: <0>, lock: OP_NOTIF OP_ELSE <1> OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF OP_ELSE <1> OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF OP_ELSE OP_ELSE <1> OP_ENDIF': [],
          'unlock: <0>, lock: OP_NOTIF OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <0>, lock: OP_NOTIF OP_RETURN OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF <1> <0> OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF <1> <1> OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF <1> OP_ELSE OP_ENDIF': [],
          'unlock: <1>, lock: OP_IF <1> OP_ENDIF': ['skip'],
          'unlock: <1>, lock: OP_IF OP_ELSE <1> OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF OP_ELSE <1> OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF OP_ELSE OP_ELSE <1> OP_ENDIF': [],
          'unlock: <1>, lock: OP_IF OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_IF OP_RETURN OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF <1> <0> OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF <1> <1> OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF <1> OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF <1> OP_ENDIF': ['skip'],
          'unlock: <1>, lock: OP_NOTIF OP_ELSE <1> OP_ELSE OP_ENDIF': [],
          'unlock: <1>, lock: OP_NOTIF OP_ELSE <1> OP_ENDIF': [],
          'unlock: <1>, lock: OP_NOTIF OP_ELSE OP_ELSE <1> OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1>, lock: OP_NOTIF OP_RETURN OP_ENDIF': ['invalid'],
        },
      ),

      ...setExpectedResults(
        generateTestCases(
          ['<1> <$0>', '$1 $2 OP_ENDIF', 'unlock: <1> $0, lock: $1 $2 OP_ENDIF'],
          [
            [
              ['<1>', '1'],
              ['<0>', '0'],
            ],
            [
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
            ],
            [
              ['OP_RETURN', 'OP_RETURN'],
              ['OP_IF', 'OP_IF'],
              ['OP_NOTIF', 'OP_NOTIF'],
              ['OP_DROP OP_ELSE', 'OP_DROP OP_ELSE'],
              ['OP_ELSE OP_DROP', 'OP_ELSE OP_DROP'],
              ['OP_ELSE OP_ELSE OP_DROP', 'OP_ELSE OP_ELSE OP_DROP'],
              ['OP_ELSE OP_ELSE OP_ELSE OP_DROP', 'OP_ELSE OP_ELSE OP_ELSE OP_DROP'],
            ],
          ],
        ),
        {
          'unlock: <1> <0>, lock: OP_IF OP_DROP OP_ELSE OP_ENDIF': [],
          'unlock: <1> <0>, lock: OP_IF OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_IF OP_ELSE OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <0>, lock: OP_IF OP_ELSE OP_ELSE OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_IF OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_IF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_IF OP_RETURN OP_ENDIF': [],
          'unlock: <1> <0>, lock: OP_NOTIF OP_DROP OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_NOTIF OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <0>, lock: OP_NOTIF OP_ELSE OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_NOTIF OP_ELSE OP_ELSE OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <0>, lock: OP_NOTIF OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_NOTIF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1> <0>, lock: OP_NOTIF OP_RETURN OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_IF OP_DROP OP_ELSE OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_IF OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <1>, lock: OP_IF OP_ELSE OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_IF OP_ELSE OP_ELSE OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <1>, lock: OP_IF OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_IF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_IF OP_RETURN OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_NOTIF OP_DROP OP_ELSE OP_ENDIF': [],
          'unlock: <1> <1>, lock: OP_NOTIF OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_NOTIF OP_ELSE OP_ELSE OP_DROP OP_ENDIF': [],
          'unlock: <1> <1>, lock: OP_NOTIF OP_ELSE OP_ELSE OP_ELSE OP_DROP OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_NOTIF OP_IF OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_NOTIF OP_NOTIF OP_ENDIF': ['invalid'],
          'unlock: <1> <1>, lock: OP_NOTIF OP_RETURN OP_ENDIF': [],
        },
      ),

      [repeat('<1>', 100), `${repeat('OP_IF', 100)} <1> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF)'],
      [repeat('<1>', 100), `${repeat('OP_IF', 100)} <0> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF), fail', ['invalid']],
      [repeat('<1>', 101), `${repeat('OP_IF', 101)} <1> ${repeat('OP_ENDIF', 101)}`, 'Excessive control stack depth (OP_IF)', ['invalid']],
      [repeat('<0>', 100), `${repeat('OP_NOTIF', 100)} <1> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_NOTIF)'],
      [repeat('<0>', 100), `${repeat('OP_NOTIF', 100)} <0> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_NOTIF), fail', ['invalid']],
      [repeat('<0>', 101), `${repeat('OP_NOTIF', 101)} <1> ${repeat('OP_ENDIF', 101)}`, 'Excessive control stack depth (OP_NOTIF)', ['invalid']],
      [repeat('<1> <0>', 50), `${repeat('OP_NOTIF OP_IF', 50)} <1> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF & OP_NOTIF)'],
      [repeat('<1> <0>', 50), `${repeat('OP_NOTIF OP_IF', 50)} <0> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF & OP_NOTIF), fail', ['invalid']],
      [`${repeat('<1> <0>', 50)} <1>`, `OP_IF ${repeat('OP_NOTIF OP_IF', 50)} <1> ${repeat('OP_ENDIF', 101)}`, 'Excessive control stack depth (OP_IF & OP_NOTIF)', ['invalid']],

      [repeat('<1>', 100), `${repeat('OP_IF', 100)} <1> OP_DROP <1> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF), 201 operations'],
      [repeat('<1>', 100), `${repeat('OP_IF', 100)} <1> OP_DROP <1> OP_DROP <1> ${repeat('OP_ENDIF', 100)}`, 'Maximize control stack depth (OP_IF), 202 operations', ['2023_invalid']],
      [repeat('<1>', 101), `${repeat('OP_IF', 101)} <1> OP_DROP <1> OP_DROP <1> ${repeat('OP_ENDIF', 101)}`, 'Excessive control stack depth (OP_IF), 202 operations', ['invalid']],
      [repeat('<1>', 100), `${repeat('OP_IF', 100)} <1> OP_IFDUP OP_DROP ${repeat('OP_ENDIF', 100)}`, 'OP_IFDUP at maximum control stack depth (OP_IF), 202 operations', ['2023_invalid']],
    ],
  ],
  [
    'Conditionally executed operations',
    [
      // TODO: all other conditional operations
      ['<0>', 'OP_IF OP_BEGIN <0> OP_UNTIL OP_ENDIF <1>', 'OP_BEGIN/OP_UNTIL are conditionally executed', ['chip_loops']],
      ['<1>', 'OP_IF OP_BEGIN <0> OP_UNTIL OP_ENDIF <1>', 'OP_BEGIN/OP_UNTIL fail on infinite loops', ['chip_loops_invalid']],
      ['<0>', 'OP_IF OP_INPUTINDEX OP_ENDIF OP_INPUTINDEX OP_INPUTINDEX OP_EQUAL', 'OP_INPUTINDEX is conditionally executed'],
      ['<0>', 'OP_IF OP_ACTIVEBYTECODE OP_ENDIF OP_ACTIVEBYTECODE OP_ACTIVEBYTECODE OP_EQUAL', 'OP_ACTIVEBYTECODE is conditionally executed'],
      ['<0>', 'OP_IF OP_TXVERSION OP_ENDIF OP_TXVERSION OP_TXVERSION OP_EQUAL', 'OP_TXVERSION is conditionally executed'],
      ['<0>', 'OP_IF OP_TXINPUTCOUNT OP_ENDIF OP_TXINPUTCOUNT OP_TXINPUTCOUNT OP_EQUAL', 'OP_TXINPUTCOUNT is conditionally executed'],
      ['<0>', 'OP_IF OP_TXOUTPUTCOUNT OP_ENDIF OP_TXOUTPUTCOUNT OP_TXOUTPUTCOUNT OP_EQUAL', 'OP_TXOUTPUTCOUNT is conditionally executed'],
      ['<0>', 'OP_IF OP_TXLOCKTIME OP_ENDIF OP_TXLOCKTIME OP_TXLOCKTIME OP_EQUAL', 'OP_TXLOCKTIME is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_UTXOVALUE OP_ENDIF <0> OP_UTXOVALUE <0> OP_UTXOVALUE OP_EQUAL', 'OP_UTXOVALUE is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_UTXOBYTECODE OP_ENDIF <0> OP_UTXOBYTECODE <0> OP_UTXOBYTECODE OP_EQUAL', 'OP_UTXOBYTECODE is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_OUTPOINTTXHASH OP_ENDIF <0> OP_OUTPOINTTXHASH <0> OP_OUTPOINTTXHASH OP_EQUAL', 'OP_OUTPOINTTXHASH is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_OUTPOINTINDEX OP_ENDIF <0> OP_OUTPOINTINDEX <0> OP_OUTPOINTINDEX OP_EQUAL', 'OP_OUTPOINTINDEX is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_INPUTBYTECODE OP_ENDIF <0> OP_INPUTBYTECODE <0> OP_INPUTBYTECODE OP_EQUAL', 'OP_INPUTBYTECODE is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_INPUTSEQUENCENUMBER OP_ENDIF <0> OP_INPUTSEQUENCENUMBER <0> OP_INPUTSEQUENCENUMBER OP_EQUAL', 'OP_INPUTSEQUENCENUMBER is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_OUTPUTVALUE OP_ENDIF <0> OP_OUTPUTVALUE <0> OP_OUTPUTVALUE OP_EQUAL', 'OP_OUTPUTVALUE is conditionally executed'],
      ['<0>', 'OP_IF <0> OP_OUTPUTBYTECODE OP_ENDIF <0> OP_OUTPUTBYTECODE <0> OP_OUTPUTBYTECODE OP_EQUAL', 'OP_OUTPUTBYTECODE is conditionally executed'],
      // CHIPS:
      ['<0>', 'OP_IF <0> OP_UTXOTOKENCATEGORY OP_ENDIF <0> OP_UTXOTOKENCATEGORY <0> OP_UTXOTOKENCATEGORY OP_EQUAL', 'OP_UTXOTOKENCATEGORY is conditionally executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENCATEGORY OP_ENDIF <0> OP_OUTPUTTOKENCATEGORY <0> OP_OUTPUTTOKENCATEGORY OP_EQUAL', 'OP_OUTPUTTOKENCATEGORY is conditionally executed', []],
      ['<0>', 'OP_IF <0> OP_UTXOTOKENCOMMITMENT OP_ENDIF <0> OP_UTXOTOKENCOMMITMENT <0> OP_UTXOTOKENCOMMITMENT OP_EQUAL', 'OP_UTXOTOKENCOMMITMENT is conditionally executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENCOMMITMENT OP_ENDIF <0> OP_OUTPUTTOKENCOMMITMENT <0> OP_OUTPUTTOKENCOMMITMENT OP_EQUAL', 'OP_OUTPUTTOKENCOMMITMENT is conditionally executed', []],
      ['<0>', 'OP_IF <0> OP_UTXOTOKENAMOUNT OP_ENDIF <0> OP_UTXOTOKENAMOUNT <0> OP_UTXOTOKENAMOUNT OP_EQUAL', 'OP_UTXOTOKENAMOUNT is conditionally executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENAMOUNT OP_ENDIF <0> OP_OUTPUTTOKENAMOUNT <0> OP_OUTPUTTOKENAMOUNT OP_EQUAL', 'OP_OUTPUTTOKENAMOUNT is conditionally executed', []],
    ],
  ],
  [
    'Unexecuted operations',
    [
      ['<0>', 'OP_IF <0> OP_UTXOTOKENCATEGORY OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENCATEGORY not executed', []],
      ['<1>', 'OP_IF <0> OP_UTXOTOKENCATEGORY OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENCATEGORY executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENCATEGORY OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENCATEGORY not executed', []],
      ['<1>', 'OP_IF <0> OP_OUTPUTTOKENCATEGORY OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENCATEGORY executed', []],
      ['<0>', 'OP_IF <0> OP_UTXOTOKENCOMMITMENT OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENCOMMITMENT not executed', []],
      ['<1>', 'OP_IF <0> OP_UTXOTOKENCOMMITMENT OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENCOMMITMENT executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENCOMMITMENT OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENCOMMITMENT not executed', []],
      ['<1>', 'OP_IF <0> OP_OUTPUTTOKENCOMMITMENT OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENCOMMITMENT executed', []],
      ['<0>', 'OP_IF <0> OP_UTXOTOKENAMOUNT OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENAMOUNT not executed', []],
      ['<1>', 'OP_IF <0> OP_UTXOTOKENAMOUNT OP_DROP OP_ENDIF <1>', 'OP_UTXOTOKENAMOUNT executed', []],
      ['<0>', 'OP_IF <0> OP_OUTPUTTOKENAMOUNT OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENAMOUNT not executed', []],
      ['<1>', 'OP_IF <0> OP_OUTPUTTOKENAMOUNT OP_DROP OP_ENDIF <1>', 'OP_OUTPUTTOKENAMOUNT executed', []],
    ],
  ],
] as const satisfies VmbTestDefinitionGroup[];
