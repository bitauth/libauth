import { range } from '../../format/format.js';
import type { VmbTestDefinitionGroup } from '../../lib.js';
import { generateTestCases, setExpectedResults } from '../bch-vmb-test-utils.js';

export default [
  [
    'Push number operations (OP_1NEGATE-OP_16)',
    [
      ['OP_1NEGATE', '<-1 0x00> <1> OP_SPLIT OP_DROP OP_EQUAL', 'Unlocking bytecode OP_1NEGATE pushes 0x81'],
      ['OP_0', '<0x00> OP_CAT <0x00> OP_EQUAL', 'Unlocking bytecode OP_0 pushes an empty stack item'],
      ...setExpectedResults(generateTestCases(['OP_$0', '<$0 0x00> <1> OP_SPLIT OP_DROP OP_EQUAL', 'Unlocking bytecode OP_$0 pushes $0'], [range(16, 1).map((i) => [`${i}`, `${i}`])]), {
        'Unlocking bytecode OP_1 pushes 1': [],
        'Unlocking bytecode OP_10 pushes 10': [],
        'Unlocking bytecode OP_11 pushes 11': [],
        'Unlocking bytecode OP_12 pushes 12': [],
        'Unlocking bytecode OP_13 pushes 13': [],
        'Unlocking bytecode OP_14 pushes 14': [],
        'Unlocking bytecode OP_15 pushes 15': [],
        'Unlocking bytecode OP_16 pushes 16': [],
        'Unlocking bytecode OP_2 pushes 2': [],
        'Unlocking bytecode OP_3 pushes 3': [],
        'Unlocking bytecode OP_4 pushes 4': [],
        'Unlocking bytecode OP_5 pushes 5': [],
        'Unlocking bytecode OP_6 pushes 6': [],
        'Unlocking bytecode OP_7 pushes 7': [],
        'Unlocking bytecode OP_8 pushes 8': [],
        'Unlocking bytecode OP_9 pushes 9': [],
      }),
      ['', 'OP_1NEGATE <-1 0x00> <1> OP_SPLIT OP_DROP OP_EQUAL', 'Locking bytecode OP_1NEGATE pushes 0x81'],
      ['', 'OP_0 <0x00> OP_CAT <0x00> OP_EQUAL', 'Locking bytecode OP_0 pushes an empty stack item'],
      ...setExpectedResults(generateTestCases(['', 'OP_$0 <$0 0x00> <1> OP_SPLIT OP_DROP OP_EQUAL', 'Locking bytecode OP_$0 pushes $0'], [range(16, 1).map((i) => [`${i}`, `${i}`])]), {
        'Locking bytecode OP_1 pushes 1': [],
        'Locking bytecode OP_10 pushes 10': [],
        'Locking bytecode OP_11 pushes 11': [],
        'Locking bytecode OP_12 pushes 12': [],
        'Locking bytecode OP_13 pushes 13': [],
        'Locking bytecode OP_14 pushes 14': [],
        'Locking bytecode OP_15 pushes 15': [],
        'Locking bytecode OP_16 pushes 16': [],
        'Locking bytecode OP_2 pushes 2': [],
        'Locking bytecode OP_3 pushes 3': [],
        'Locking bytecode OP_4 pushes 4': [],
        'Locking bytecode OP_5 pushes 5': [],
        'Locking bytecode OP_6 pushes 6': [],
        'Locking bytecode OP_7 pushes 7': [],
        'Locking bytecode OP_8 pushes 8': [],
        'Locking bytecode OP_9 pushes 9': [],
      }),

      ['<0> OP_IF OP_1NEGATE OP_ENDIF', '', '<0> OP_IF OP_1NEGATE OP_ENDIF in unlocking bytecode', ['invalid']],
      ['<1> OP_IF OP_1NEGATE OP_ENDIF', '', '<1> OP_IF OP_1NEGATE OP_ENDIF in unlocking bytecode', ['invalid']],
      ['<0> OP_IF OP_0 OP_ENDIF OP_NOT', '', '<0> OP_IF OP_1NEGATE OP_ENDIF OP_NOT in unlocking bytecode', ['invalid']],
      ['<1> OP_IF OP_0 OP_ENDIF OP_NOT', '', '<1> OP_IF OP_1NEGATE OP_ENDIF OP_NOT in unlocking bytecode', ['invalid']],
      ['', '<0> OP_IF OP_1NEGATE OP_ENDIF', '<0> OP_IF OP_1NEGATE OP_ENDIF in locking bytecode', ['invalid']],
      ['', '<1> OP_IF OP_1NEGATE OP_ENDIF', '<1> OP_IF OP_1NEGATE OP_ENDIF in locking bytecode'],
      ['', '<0> OP_IF OP_0 OP_ENDIF OP_NOT', '<0> OP_IF OP_1NEGATE OP_ENDIF OP_NOT in locking bytecode', ['invalid']],
      ['', '<1> OP_IF OP_0 OP_ENDIF OP_NOT', '<1> OP_IF OP_1NEGATE OP_ENDIF OP_NOT in locking bytecode'],
      ...setExpectedResults(
        generateTestCases(
          ['<$1> OP_IF OP_$0 OP_ENDIF', '', '<$1> OP_IF OP_$0 OP_ENDIF in unlocking bytecode'],
          [
            range(16, 1).map((i) => [`${i}`, `${i}`]),
            [
              ['0', '0'],
              ['1', '1'],
            ],
          ],
        ),
        {
          '<0> OP_IF OP_1 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_10 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_11 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_12 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_13 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_14 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_15 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_16 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_2 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_3 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_4 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_5 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_6 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_7 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_8 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<0> OP_IF OP_9 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_1 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_10 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_11 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_12 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_13 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_14 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_15 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_16 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_2 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_3 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_4 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_5 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_6 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_7 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_8 OP_ENDIF in unlocking bytecode': ['invalid'],
          '<1> OP_IF OP_9 OP_ENDIF in unlocking bytecode': ['invalid'],
        },
      ),
      ...setExpectedResults(
        generateTestCases(
          ['', '<$1> OP_IF OP_$0 OP_ENDIF', '<$1> OP_IF OP_$0 OP_ENDIF in locking bytecode'],
          [
            range(16, 1).map((i) => [`${i}`, `${i}`]),
            [
              ['0', '0'],
              ['1', '1'],
            ],
          ],
        ),
        {
          '<0> OP_IF OP_1 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_10 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_11 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_12 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_13 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_14 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_15 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_16 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_2 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_3 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_4 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_5 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_6 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_7 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_8 OP_ENDIF in locking bytecode': ['invalid'],
          '<0> OP_IF OP_9 OP_ENDIF in locking bytecode': ['invalid'],
          '<1> OP_IF OP_1 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_10 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_11 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_12 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_13 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_14 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_15 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_16 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_2 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_3 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_4 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_5 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_6 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_7 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_8 OP_ENDIF in locking bytecode': [],
          '<1> OP_IF OP_9 OP_ENDIF in locking bytecode': [],
        },
      ),
    ],
  ],
] as const satisfies VmbTestDefinitionGroup[];
